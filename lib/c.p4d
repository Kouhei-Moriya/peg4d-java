// PEG4d C Grammar
// ===============
//
// Based on grammar from ISO/IEC 9899:2011 [1]. 
//
// Limitations:
//
//   * Non-BMP characters are completely ignored to avoid surrogate pair
//     handling.
//
// All the limitations could be resolved, but the costs would likely outweigh
// the benefits.
//
// Many thanks to inimino [3] for his grammar [4] which helped me to solve some
// problems (such as automatic semicolon insertion) and also served to double
// check that I converted the original grammar correctly.
//
// [1] ISO/IEC 9899:2011

export
	= Statement
	/ Expression
	/ CInteger
	/ CFloat
	/ CString
	/ CChar

File
	= _ { (@ExternalDeclaration)* #Source } EOT
	
Chunk
	= TopLevel
	/ Expression
	/ Statement
	/ Type
_
	= (S / LONGCOMMENT / LINECOMMENT / PRAGMA)*
	
S
	= [ \n\r\t\u000B\u000C]
	
LONGCOMMENT
	= '/*' (!'*/' .)* '*/'
	
LINECOMMENT
	= '//' (!'\n' .)*
	
PRAGMA
	= '#' (!'\n' .)*

ATTRIBUTE
	= '__attribute__' !W _ '((' (!'))' .)* '))' _
	
EOL
	= ('\r'? '\n' / !.)

DIGIT
	= [0-9]

W
	= [a-zA-Z0-9_]
	/ UCHAR

UCHAR
	= '\\u' HEX4
	/ '\\U' HEX4 HEX4

HEX4
	= HEX HEX HEX HEX

Name
	= { NAME #Name } _ 

NAME
	= !DIGIT !(KEYWORD !W) W+

KEYWORD
	= 'auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' 
	/ 'double' / 'do' / 'else' / 'enum' / 'extern' / 'float' / 'for' 
	/ 'goto' / 'if' / 'int' / 'inline' / 'long' / 'register' / 'restrict' 
	/ 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' 
	/ 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' 
	/ 'while' / '_Bool' / '_Complex' / '_Imaginary' / '_stdcall' 
	/ '__declspec' / '__attribute__' / '__asm'

INC     = '++' _
DEC     = '--' _
AND     = '&' !'&' _
STAR    = '*' !'=' _
PLUS    = '+' ![+=] _
MINUS   = '-' !('-' / [=>]) _
TILDA   = '~' _
BANG    = '!' !'=' _
VOID      = 'void'     !W
CHAR      = 'char'     !W
SHORT     = 'short'    !W
INT       = 'int'      !W
LONG      = 'long'     !W
FLOAT     = 'float'    !W
DOUBLE    = 'double'   !W
SIGNED    = 'signed'   !W
UNSIGNED  = 'unsigned' !W
BOOL      = '_Bool'    !W
COMPLEX   = '_Complex' !W
STRUCT    = 'struct'   !W
UNION     = 'union'    !W
LWING     = '{' _ ;
LBRK      = '[' _ ;
RBRK      = ']' _ ;
COMMA_	  = ',' _
ELLIPSIS	= '...' _
COLON	= ':' ![>] _
DIV	= '/' !'=' _
MOD	= '%' ![=>] _
LEFT	= '<<' !'=' _
RIGHT	= '>>' !'=' _
LE	= '<=' _
GE	= '>=' _
LT	= '<' ![=] _
GT	= '>' ![=] _
EQUEQU	= '==' _
BANGEQU	= '!=' _
HAT	= '^' ![=] _
OR	= '|' ![=] _
ANDAND	= '&&' _
OROR	= '||' _
QUERY	= '?' _
SEMI	= (';' _ / EOL)  /* this is for debug */
RWING	= '}' _
PTR	= '->' _
ENUM	= 'enum' !W _
ASM	= '__asm' !W _
CASE	= 'case' !W _
DEFAULT	= 'default' !W _
IF	= 'if' !W _
ELSE	= 'else' !W _
SWITCH	= 'switch' !W _
WHILE	= 'while' !W _
DO	= 'do' !W _
FOR	= 'for' !W _
GOTO	= 'goto' !W _
CONTINUE	= 'continue' !W _
BREAK	= 'break' !W _
RETURN	= 'return' !W _
STAREQU	= '*=' _
DIVEQU	= '/=' _
MODEQU	= '%=' _
PLUSEQU	= '+=' _
MINUSEQU	= '-=' _
LEFTEQU	= '<<=' _
RIGHTEQU	= '>>=' _
ANDEQU	= '&=' _
HATEQU	= '^=' _
OREQU	= '|=' _
EQU	= '=' !'=' _
DOT	= '.' _
SIZEOF	= 'sizeof' !W _
TYPEDEF	= 'typedef' !W _
EXTERN	= 'extern' !W _
STATIC	= 'static' !W _
AUTO	= 'auto' !W _
REGISTER	= 'register' !W _
CONST	= 'const' !W _
RESTRICT	= 'restrict' !W _
VOLATILE	= 'volatile' !W _
DECLSPEC	= '__declspec' !W _
INLINE	= 'inline' !W _
STDCALL	= '_stdcall' !W _

LPAR	= '(' _
RPAR	= ')' _

EOT	= !.

TopLevel
	= FunctionDefinition
	/ Declaration
	/ TypeDef

FunctionDefinition
	= { @AnnotationList @Type @Name LPAR @FunctionParamList RPAR @Block #Function }

AnnotationList
	= { (@Annotation)*  #List } _

Annotation
	= 'extern'    !W _   { #KeyValue @{`extern` #Key } @{`true` #Value } } _
	/ 'static'    !W _   { #KeyValue @{`static` #Key } @{`true` #Value } } _
	/ 'auto'      !W _   { #KeyValue @{`auto` #Key } @{`true` #Value } } _
	/ 'register'  !W _   { #KeyValue @{`register` #Key } @{`true` #Value } } _
	/ 'volatile'  !W _   { #KeyValue @{`volatile` #Key } @{`true` #Value } } _
	/ '__declspec'  !W _ LPAR { #KeyValue @{`volatile` #Key } @(Name #Value) } _ RPAR _
	/ ('inline' / '__inline')  !W _  { #KeyValue @{`inline` #Key } @{`true` #Value } } _
	/ '_stdcall' !W _  { #KeyValue @{`stdcall` #Key } @{`true` #Value } } _

FunctionParamList
	= { ( FunctionParam (COMMA_ FunctionParam)+ )? (COMMA_ ELLIPSIS)? #List } 

FunctionParam
	= { @Type _ @Name #Param} _
	
// Declaration
//==============

TypeDef
	= { 'typedef' !W _ @Type @Name #TypeDeclaration } _ SEMI

Declaration
	= { @AnnotationList @Type @InitDecl (COMMA_ @InitDecl)* #Declaration } ATTRIBUTE? SEMI

InitDecl
	= { @VarName (EQU @Initializer)? #VarDecl } _

VarName
	= { STAR @VarName #PointerName } _
	/ Name {@ LBRK @ConstantExpression RBRK #ArrayName}*

Initializer
	= AssignmentExpression
	/ LWING { (AddInitializerList)* COMMA_? #Initializer } RWING

AddInitializerList
	= (@Designation / @Initializer)? (COMMA_ (@Designation / @Initializer))*

Designation
	= { (@Designator)+ EQU @Initializer  #Designation }
	
Designator
	= LBRK ConstantExpression RBRK
	/ DOT Name _


//Type
//====

Type
	= { CONST _ @TypeSuffix #TConst } _ / TypeSuffix 

TypeSuffix
	= PrimaryType {@ (STAR (POINTER_QUALIFIER)* #TPointer / LBRK (NAME / DIGIT* ) _ RBRK #TPointer / AddFuncType ) }*

POINTER_QUALIFIER
	= CONST / RESTRICT

AddFuncType
	= LPAR STAR @Name RPAR LPAR (@Type (_ NAME _)? (COMMA_ @Type (_ NAME _)? )* )? RPAR #TFunc
	
PrimaryType
	= { STRUCT _ @Name AddStructMember?  #TStruct } _
	/ { UNION _  @Name  AddStructMember?  #TUnion } _
	/ { 'enum' !W _ @Name LWING @EnumeratorList COMMA_? RWING #TEnum } _
	/ { VOID #TVoid } _
	/ { SIGNED_PREFIX? CHAR          #TInt } _
	/ { SIGNED_PREFIX? SHORT         #TInt } _
	/ { SIGNED_PREFIX? INT           #TInt } _
	/ { FLOAT           #TFloat } _
	/ { DOUBLE          #TFloat } _
	/ { LONG _ DOUBLE   #TFloat } _
	/ { SIGNED_PREFIX? LONG (_ LONG)? (_ INT)? #TInt } _
	/ { SIGNED `signed int` #TInt } _
	/ { UNSIGNED `unsigned int` #TInt } _
	/ { BOOL #TBoolean } _
	/ { COMPLEX #TComplex } _
	/ { NAME_T #TName } _
	/ { NAME   #Name } _

SIGNED_PREFIX
	= (SIGNED _ / UNSIGNED _ )

NAME_T
	= !DIGIT (!('_t' !W)  W )+ '_t' !W
	
AddStructMember
	= LWING (@StructDeclaration)+ RWING

StructDeclaration
	= { @AnnotationList @Type StructMemberName  (COMMA_ @StructMemberName )* } _ SEMI

StructMemberName
	= VarName {@ COLON @ConstantExpression #Bit}

EnumeratorList
	= { @Enumerator (COMMA_ @Enumerator)* COMMA_? #List }

Enumerator
	= Name {@ EQU @ConstantExpression}?


// Block, Statement
//===================

Block
	= { LWING (@(Declaration / Statement))* RWING #Block }

Statement
	= Block
	/ { IF     LPAR @Expression RPAR @Statement (ELSE @Statement)? #If }
	/ { SWITCH LPAR @Expression RPAR @Statement #Switch }
	/ { WHILE  LPAR @Expression RPAR @Statement #While }
	/ { DO @Statement WHILE LPAR @Expression RPAR SEMI #DoWhile }
	/ { FOR LPAR (@Expression)? SEMI (@Expression^) SEMI (@Expression)? RPAR @Statement #For }
	/ { FOR LPAR @Declaration (@Expression)? SEMI (@Expression)? RPAR @Statement #For }
	/ { GOTO Name #Goto } SEMI
	/ { CONTINUE #Continue } SEMI 
	/ { BREAK #Break } SEMI 
	/ { RETURN (@Expression)? #Return } SEMI 
	/ { CASE @ConstantExpression COLON @Statement #SwitchCase }
	/ { DEFAULT COLON @Statement #SwitchDefault }
	/ { @Name COLON @Statement #LabelBlock }
	/ Expression SEMI
	/ { #Empty } SEMI


//Expression
//==========

Expression
	= AssignmentExpression {@ COMMA_ @AssignmentExpression #Expression }*

AssignmentExpression
	= { @UnaryExpression AddAssignmentOperator @AssignmentExpression }
	/ ConditionalExpression

AddAssignmentOperator
	= EQU        #Assign
	/ STAREQU    #AssignMul
	/ DIVEQU     #AssignDiv
	/ MODEQU     #AssignMod
	/ PLUSEQU    #AssignAdd
	/ MINUSEQU   #AssignSub
	/ LEFTEQU    #AssignLeftShift
	/ RIGHTEQU   #AssignRightShift
	/ ANDEQU     #AssignBitwiseAnd
	/ HATEQU     #AssignBitwiseXOr 
	/ OREQU      #AssignBitwiseOr

ConstantExpression
	= ConditionalExpression
	
ConditionalExpression
	= LogicalORExpression {@ QUERY  @Expression COLON @LogicalORExpression #Trinary }*

LogicalORExpression
	= LogicalANDExpression {@ OROR @LogicalANDExpression #Or }*

LogicalANDExpression
	= InclusiveORExpression {@ ANDAND @InclusiveORExpression #And }*

InclusiveORExpression
	= ExclusiveORExpression {@ OR @ExclusiveORExpression #BitwiseOr }*

ExclusiveORExpression
	= ANDExpression {@ HAT @ANDExpression #BitwiseXor }*

ANDExpression
	= EqualityExpression {@ AND @EqualityExpression #BitwiseAnd }*

EqualityExpression
	= RelationalExpression {@ ( EQUEQU #Equals / BANGEQU #NotEquals ) @RelationalExpression }*
	
RelationalExpression
	= ShiftExpression {@ ( LE #LessThanEquals / GE #GreaterThanEquals / LT #LessThan / GT #GreaterThan ) @ShiftExpression }*
	
ShiftExpression
	= AdditiveExpression {@ ( LEFT #LeftShift / RIGHT #RightShift ) @AdditiveExpression }*
	
AdditiveExpression
	= MultiplicativeExpression {@ ( PLUS #Add / MINUS #Sub ) @MultiplicativeExpression }*
	
MultiplicativeExpression
	= CastExpression {@ ( STAR #Mul / DIV #Div / MOD #Mod ) @CastExpression }*

UnaryExpression
	= PostfixExpression
	/ { INC    @UnaryExpression #PrefixInc }
	/ { DEC    @UnaryExpression #PrefixDec }
	/ { AND    @CastExpression #Address }
	/ { STAR   @CastExpression #Star }
	/ { PLUS   @CastExpression #Plus }
	/ { MINUS  @CastExpression #Minus }
	/ { TILDA  @CastExpression #Compl }
	/ { BANG   @CastExpression #Not }
	/ { 'sizeof' !W _  ( @UnaryExpression / LPAR @Type RPAR ) #SizeOf }

CastExpression
	= { LPAR @Type RPAR @CastExpression #Cast }
	/ UnaryExpression

PostfixExpression
	= ( PrimaryExpression / { LPAR @Type RPAR LWING @{ (AddInitializerList)* COMMA_? #Initializer } RWING } ) 
	{@ (AddFunctionCall / AddIndex  / DOT @Name #Field / PTR @Name #PointerField / INC #Inc / DEC #Dec) }*

AddFunctionCall
	= LPAR @{ AddArgumentExpressionList? #List} RPAR #Apply

AddArgumentExpressionList
	= (@AssignmentExpression (COMMA_ @AssignmentExpression)*)

AddIndex
	= LBRK @Expression RBRK #Index

PrimaryExpression
	= Constant
	/ CString
	/ LPAR Expression RPAR
	/ Name
	
//Literal
//=======

Constant
	= CFloat
	/ CInteger
	/ CChar

CFloat
	= { ( DECIMAL_FLOAT / HEX_FLOAT )  #Float } FLOAT_SUFFIX? _

DECIMAL_FLOAT
	= FRACTION EXPONENT?
	/ DIGIT+ EXPONENT

FRACTION
	= DIGIT* '.' DIGIT+
	/ DIGIT+ '.'

EXPONENT
	= [eE] [+\-]? DIGIT+

HEX_FLOAT
	= HEX_PREFIX HEX_FRACTION BINARY_EXPONENT?
	/ HEX_PREFIX HEX+ BINARY_EXPONENT

HEX_PREFIX
	= '0' [xX]

HEX_FRACTION
	= HEX* '.' HEX+
	/ HEX+ '.'

BINARY_EXPONENT
	= [pP] [+\-]? DIGIT+

FLOAT_SUFFIX
	= [flFL]

CInteger
	= { ( DECIMAL / HEXICAL / OCTAL ) #Integer } INT_SUFFIX? _

DECIMAL
	= [1-9] DIGIT*

HEXICAL
	= HEX_PREFIX HEX+

OCTAL
	= '0' [0-7]*

INT_SUFFIX
	= [uU] LONG_SUFFIX?
	/ LONG_SUFFIX [uU]?

LONG_SUFFIX
	= 'll'
	/ 'LL'
	/ [lL]

CString
	=  'L'? ('"' { STRING_CONTENT* #String } '"' _)+

CChar
	= 'L'? "'" { CHAR_CONTENT* #Character } "'" _

STRING_CONTENT
	= ESCAPE
	/ ![\"\n\\] .


CHAR_CONTENT
	= ESCAPE
	/ !['\n\\] .

ESCAPE
	= SIMPLE_ESCAPE
	/ OCTAL_ESCAPE
	/ HEX_ESCAPE
	/ UCHAR

SIMPLE_ESCAPE
	= '\\' ['\"?\\abfnrtv]
	
OCTAL_ESCAPE
	= '\\' [0-7] [0-7]? [0-7]?
	
HEX_ESCAPE
	= '\\x' HEX+
	

	
	
// ==========================================================================

ExternalDeclaration
	= FunctionDefinitionOrig
	/ DeclarationOrig
	
FunctionDefinitionOrig
	= { DeclarationSpecifiers^3 Declarator^0 (DeclarationList^1)? Block^2 #Function }

DeclarationOrig
	= DeclarationNoAttribute^ ((Assembler)^)? SEMI

DeclarationList
	= Declaration+

DeclarationNoAttribute
	= DeclarationSpecifiers^ (InitDeclaratorList^)?
	;
InitDeclaratorList
	= InitDeclarator^ (COMMA_ InitDeclarator^)*
	;
InitDeclarator
	= { (Pointer^)? DirectDeclarator^ (EQU Initializer^)? #assign }
	;
Assembler
	= ASM LPAR (CString (COMMA_ CString)*)? RPAR
	;

DeclarationSpecifiers
	= (StorageClassSpecifier / TypeQualifier / FunctionSpecifier)* 
	   TypedefName (StorageClassSpecifier / TypeQualifier / FunctionSpecifier)*
	/ (StorageClassSpecifier / TypeSpecifier / TypeQualifier / FunctionSpecifier)+
	
StorageClassSpecifier
	= TYPEDEF / EXTERN / STATIC / AUTO / REGISTER

TypeQualifier
	= CONST
	/ RESTRICT
	/ VOLATILE
	/ DECLSPEC LPAR Name RPAR

FunctionSpecifier
	= INLINE
	/ STDCALL

TypeName
	= { SpecifierQualifierList^ (AbstractDeclarator^)? #c.typename }

SpecifierQualifierList
	= (TypeQualifier* TypedefName TypeQualifier*)^
	/ ((TypeSpecifier / TypeQualifier)^)+
	
TypedefName
	= { Name^ #c.typedefname }
	;
	
TypeSpecifier
	= { VOID #Tvoid }
	/ { CHAR #Tchar }
	/ { SHORT #Tshort }
	/ { INT #Tint }
	/ { LONG #Tlong }
	/ { FLOAT #Tfloat }
	/ { DOUBLE #Tdouble }
	/ { SIGNED #Tsigned }
	/ { UNSIGNED #Tunsigned }
	/ { BOOL #Tbool }
	/ { COMPLEX #Tcomplex }
	/ { StructOrUnionSpecifier #Tstructorunion }

StructOrUnionSpecifier
	= StructOrUnion^ ( (Name^)? LWING (StructDeclaration^)+ RWING / Name^ )

StructOrUnion
	= { STRUCT #c.struct }
	/ { UNION #c.union }

StructDeclaration
	= { SpecifierQualifierList StructDeclaratorList^ SEMI #c.structdeclaration }

StructDeclaratorList
	= { StructDeclarator (COMMA_ StructDeclarator)* #c.structdeclaratorlist }

StructDeclarator
	= (Declarator^)? COLON ConstantExpression^
	/ Declarator^
	;
	
Declarator
	= (Pointer^)? DirectDeclarator^

Pointer
	= { (STAR (TypeQualifier^)*)+ #c.pointer }

DirectDeclarator
	= ( Name^ / LPAR Declarator^ RPAR ) ({ LBRK (TypeQualifier^)* (AssignmentExpression^)? RBRK #arraysize } / LBRK STATIC^ (TypeQualifier^)* AssignmentExpression^ RBRK / LBRK (TypeQualifier^)+ STATIC^ AssignmentExpression^ RBRK / LBRK (TypeQualifier^)* STAR^ RBRK / LPAR ParameterTypeList^ RPAR / LPAR (NameList^)? RPAR)*
	;
ParameterTypeList
	= ParameterList^ (COMMA_ ELLIPSIS)?
	;
ParameterList
	= ParameterDeclaration {@ COMMA_ ParameterDeclaration^ #param }*
	;
ParameterDeclaration
	= DeclarationSpecifiers {@ (Declarator / AbstractDeclarator)^ #c.parameterdeclaration }?
	;
AbstractDeclarator
	= Pointer? DirectAbstractDeclarator
	/ Pointer
	;
DirectAbstractDeclarator
	= ( LPAR AbstractDeclarator RPAR / LBRK (AssignmentExpression / STAR)? RBRK / LPAR ParameterTypeList? RPAR ) (LBRK (AssignmentExpression / STAR)? RBRK / LPAR ParameterTypeList? RPAR)*
	;

NameList
	= { Name^ (COMMA_ Name^)* #c.identifierlist }
	;


	